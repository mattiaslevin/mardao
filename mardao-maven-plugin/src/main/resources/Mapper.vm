#set( $allFields = $entity.allFields )
package ${daoBasePackage};

import java.util.Collection;
import java.util.Date;

import net.sf.mardao.dao.Mapper;
import net.sf.mardao.dao.Supplier;
import net.sf.mardao.domain.AbstractEntityBuilder;
import ${entity.className};

/**
 * The ${entity.simpleName} domain-object specific mapping methods go here.
 *
 * Generated on ${currentDate}.
 * @author mardao DAO generator (${helper.class.name})
 */
public class ${entity.simpleName}Mapper
  implements Mapper<${entity.simpleName}, ${entity.pk.simpleType}> {

  private final Supplier supplier;

  public enum Field {
    ${entity.pk.nameUpper}("${entity.pk.name}")#foreach( $field in $allFields ),
    ${field.nameUpper}("${field.columnName}")#end;

    private final String fieldName;

    Field(String fieldName) {
      this.fieldName = fieldName;
    }

    public String getFieldName() {
      return fieldName;
    }
  }

  public ${entity.simpleName}Mapper(Supplier supplier) {
    this.supplier = supplier;
  }

  @Override
  public ${entity.pk.simpleType} fromKey(Object key) {
    return supplier.to${entity.pk.simpleType}Key(key);
  }

  @Override
  public ${entity.simpleName} fromReadValue(Object value) {
    final ${entity.simpleName} entity = new ${entity.simpleName}();

    // set primary key:
    entity.set${entity.pk.nameFirst}(supplier.get${entity.pk.simpleType}(value, Field.${entity.pk.nameUpper}.getFieldName()));

    // set all fields:
#foreach( $field in $allFields )
    entity.set${field.nameFirst}(supplier.get${field.simpleType}(value, Field.${field.nameUpper}.getFieldName()));
#end
    return entity;
  }

  @Override
  public String getCreatedByColumnName() {
#if( $entity.createdBy )
    return Field.${entity.createdBy.nameUpper}.getFieldName();
#else
    return null;
#end
  }

  @Override
  public String getCreatedDateColumnName() {
#if( $entity.createdDate )
    return Field.${entity.createdDate.nameUpper}.getFieldName();
#else
    return null;
#end
  }

  @Override
  public String getUpdatedByColumnName() {
#if( $entity.updatedBy )
    return Field.${entity.updatedBy.nameUpper}.getFieldName();
#else
    return null;
#end
  }

  @Override
  public String getUpdatedDateColumnName() {
#if( $entity.updatedDate )
    return Field.${entity.updatedDate.nameUpper}.getFieldName();
#else
    return null;
#end
  }

  @Override
  public ${entity.pk.simpleType} getId(${entity.simpleName} entity) {
    return entity != null ? entity.get${entity.pk.nameFirst}() : null;
  }

  @Override
  public Object getParentKey(${entity.simpleName} entity) {
#if( $entity.parent )
    return null != entity ? entity.get${entity.parent.nameFirst}() : null;
#else
    return null;
#end
  }

  @Override
  public void setParentKey(${entity.simpleName} entity, Object parentKey) {
#if( $entity.parent )
    entity.set${entity.parent.nameFirst}(parentKey);
#else
    // this entity has no parent
#end
}

@Override
  public String getKind() {
    return ${entity.pk.simpleType}.class.getSimpleName();
  }

  @Override
  public Object toKey(Object parentKey, ${entity.pk.simpleType} id) {
    return supplier.toKey(parentKey, ${entity.pk.simpleType}.class.getSimpleName(), id);
  }

  @Override
  public Object toWriteValue(${entity.simpleName} entity) {
    final ${entity.pk.simpleType} id = getId(entity);
    final Object parentKey = getParentKey(entity);
    final Object key = toKey(parentKey, id);
    final Object value = supplier.createWriteValue(key);

    // set the primary key:
    supplier.set${entity.pk.simpleType}(value, Field.${entity.pk.nameUpper}.getFieldName(), entity.get${entity.pk.nameFirst}());

    // set all fields:
#foreach( $field in $allFields )
    supplier.set${field.simpleType}(value, Field.${field.nameUpper}.getFieldName(), entity.get${field.nameFirst}());
#end
    return value;
  }

  public static ${entity.simpleName}Builder newBuilder() {
    return new ${entity.simpleName}Builder();
  }

  public static class ${entity.simpleName}Builder extends AbstractEntityBuilder<${entity.simpleName}> {

    @Override
    protected ${entity.simpleName} newInstance() {
      return new ${entity.simpleName}();
    }

    public ${entity.simpleName}Builder ${entity.pk.name}(${entity.pk.simpleType} ${entity.pk.name}) {
      entity.set${entity.pk.nameFirst}(${entity.pk.name});
      return this;
    }

#foreach( $field in $allFields )
    public ${entity.simpleName}Builder ${field.name}(${field.simpleType} ${field.name}) {
      entity.set${field.nameFirst}(${field.name});
      return this;
    }
#end
  }
}
